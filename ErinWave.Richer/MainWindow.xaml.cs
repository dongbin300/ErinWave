using ErinWave.Richer.Converters;
using ErinWave.Richer.Enums;
using ErinWave.Richer.Models.Exchanges;
using ErinWave.Richer.Util;

using SkiaSharp;

using System.Runtime.InteropServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;

namespace ErinWave.Richer
{
	/// <summary>
	/// Interaction logic for MainWindow.xaml
	/// </summary>
	public partial class MainWindow : Window
	{
		System.Timers.Timer timer;
		QuantityToWidthConverter qtwConverter = default!;
		decimal orderBookTickSize = 0.01m;
		RicherPair currentPair;
		RicherInterval currentInterval;

		public MainWindow()
		{
			InitializeComponent();

			timer = new System.Timers.Timer(290);
			timer.Elapsed += Timer_Elapsed;
			timer.Start();

			RM.Init();
			RM.Load();
			RM.InitAfterLoad();

			currentPair = RM.Exchange.Pairs[0];

			CurrentPairText.Text = currentPair.Symbol;
			OrderBookTickSizeComboBox.Items.Clear();
			for (int i = 0; i < 8; i++)
			{
				OrderBookTickSizeComboBox.Items.Add(currentPair.TickPrice * (decimal)Math.Pow(10, i));
			}
			OrderBookTickSizeComboBox.SelectedIndex = 0;

			ChartIntervalComboBox.ItemsSource = Enum.GetValues(typeof(RicherInterval)).Cast<RicherInterval>();
			ChartIntervalComboBox.SelectedIndex = 0;

			if (RM.Ais.Count < 10)
			{
				RM.MakeUpAis(currentPair.Symbol, 5, 500);
			}
		}

		private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
		{
			//RM.Save();
		}

		private void Timer_Elapsed(object? sender, System.Timers.ElapsedEventArgs e)
		{
			try
			{
				RM.RicherTime = RM.RicherTime.AddSeconds(1);
				RM.ProcessAiv2(1);

				DispatcherService.Invoke(() =>
				{
					LoadChart();
					DrawOrderBook(10, orderBookTickSize);
					DrawTransaction(15);
					CurrentPriceText.Text = currentPair.Price.ToString();
					CurrentPriceText.Foreground = currentPair.LastTransaction != null && currentPair.LastTransaction.IsTakerBuy ? Common.LongColor : Common.ShortColor;
					MyAssetDataGrid.ItemsSource = null;
					MyAssetDataGrid.ItemsSource = RM.Human.Wallet.Assets;
					MyOrderDataGrid.ItemsSource = currentPair.GetOpenOrders(RM.Human.Id);
					//MyTransactionDataGrid.ItemsSource = currentPair.GetTransactionHistoriesLight(RM.Human.Id);
				});
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.ToString());
			}
		}

		#region OrderBook
		private void DrawOrderBook(int tickCount, decimal tickSize)
		{
			try
			{
				var orderBook = currentPair.GetOrderBook(tickSize);
				var orderData = orderBook.SellTicks.Take(tickCount).Reverse();
				orderData = orderData.Concat(orderBook.BuyTicks.Take(tickCount));

				if (orderData != null)
				{
					qtwConverter = (QuantityToWidthConverter)Application.Current.Resources["qtw"];
					qtwConverter.MaxQuantity = orderData.Max(o => o.Quantity);

					OrderBookDataGrid.ItemsSource = orderData.ToList();
				}
			}
			catch
			{
			}
		}

		private void OrderBookTickSizeComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
		{
			if (e.AddedItems[0] is not decimal tickSize)
			{
				return;
			}

			orderBookTickSize = tickSize;
		}
		#endregion

		#region Transaction
		private void DrawTransaction(int count)
		{
			try
			{
				List<RicherTransaction> transactionsSnapshot;
				transactionsSnapshot = [.. currentPair.Transactions];
				var transactions = transactionsSnapshot.OrderByDescending(x => x.Time).Take(count).ToList();
				TransactionDataGrid.ItemsSource = transactions;
			}
			catch 
			{
			}
		}

		private void TransactionDataGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
		{
			e.Cancel = true;
		}

		private void TransactionDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
		{
			foreach (var column in TransactionDataGrid.Columns)
			{
				if (column.Header.ToString() == "Quantity")
				{
					column.CellStyle = new Style(typeof(DataGridCell));
					column.CellStyle.Setters.Add(new Setter(TextBlock.ForegroundProperty, new Binding("PriceColor")));
				}
			}
		}
		#endregion

		#region Order
		private void OrderLimitBuyButton_Click(object sender, RoutedEventArgs e)
		{
			try
			{
				var price = decimal.Parse(OrderPriceTextBox.Text);
				var quantity = decimal.Parse(OrderQuantityTextBox.Text);
				RM.PlaceOrder(RM.Human, currentPair.Symbol, OrderSide.Buy, OrderType.Limit, quantity, price);
				OrderPriceTextBox.Clear();
				//OrderQuantityTextBox.Clear();
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.Message);
			}
		}

		private void OrderLimitSellButton_Click(object sender, RoutedEventArgs e)
		{
			try
			{
				var price = decimal.Parse(OrderPriceTextBox.Text);
				var quantity = decimal.Parse(OrderQuantityTextBox.Text);
				RM.PlaceOrder(RM.Human, currentPair.Symbol, OrderSide.Sell, OrderType.Limit, quantity, price);
				OrderPriceTextBox.Clear();
				//OrderQuantityTextBox.Clear();
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.Message);
			}
		}

		private void OrderMarketBuyButton_Click(object sender, RoutedEventArgs e)
		{
			try
			{
				var quantity = decimal.Parse(OrderQuantityTextBox.Text);
				RM.PlaceOrder(RM.Human, currentPair.Symbol, OrderSide.Buy, OrderType.Market, quantity);
				OrderPriceTextBox.Clear();
				//OrderQuantityTextBox.Clear();
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.Message);
			}
		}

		private void OrderMarketSellButton_Click(object sender, RoutedEventArgs e)
		{
			try
			{
				var quantity = decimal.Parse(OrderQuantityTextBox.Text);
				RM.PlaceOrder(RM.Human, currentPair.Symbol, OrderSide.Sell, OrderType.Market, quantity);
				OrderPriceTextBox.Clear();
				//OrderQuantityTextBox.Clear();
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.Message);
			}
		}

		private void OrderLimitAllSellButton_Click(object sender, RoutedEventArgs e)
		{
			try
			{
				var price = decimal.Parse(OrderPriceTextBox.Text);
				var quantity = RM.Human.GetAssetQuantity(currentPair.BaseAsset);
				RM.PlaceOrder(RM.Human, currentPair.Symbol, OrderSide.Sell, OrderType.Limit, quantity, price);
				OrderPriceTextBox.Clear();
				//OrderQuantityTextBox.Clear();
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.Message);
			}
		}
		#endregion

		#region My Order
		private void OrderCancelButton_Click(object sender, RoutedEventArgs e)
		{
			if (e.Source is not Button button)
			{
				return;
			}

			if (button.DataContext is not RicherOpenOrder order)
			{
				return;
			}

			RM.CancelOrder(RM.Human, currentPair.Symbol, order);
		}
		#endregion

		#region My Transaction
		private void MyTransactionDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
		{
			foreach (var column in MyTransactionDataGrid.Columns)
			{
				if (column.Header.ToString() == "Side")
				{
					column.CellStyle = new Style(typeof(DataGridCell));
					column.CellStyle.Setters.Add(new Setter(TextBlock.ForegroundProperty, new Binding("SideColor")));
				}
			}
		}
		#endregion

		#region Chart
		[StructLayout(LayoutKind.Sequential)]
		public struct POINT
		{
			public int X;
			public int Y;
		}

		[DllImport("User32.dll")]
		public static extern bool GetCursorPos(ref POINT lpPoint);

		public static Point GetCursorPosition()
		{
			var lpPoint = new POINT();
			GetCursorPos(ref lpPoint);
			return new Point(lpPoint.X, lpPoint.Y);
		}

		private readonly SKFont CandleInfoFont = new(SKTypeface.FromFamilyName("Meiryo UI"), 11);
		private readonly SKPaint CandleInfoPaint = new() { Color = SKColors.White };
		private readonly SKPaint HorizontalLinePointerPaint = new() { Color = SKColors.Silver };
		private readonly SKPaint LongHorizontalLinePointerPaint = new() { Color = new SKColor(59, 207, 134) };
		private readonly SKPaint ShortHorizontalLinePointerPaint = new() { Color = new SKColor(237, 49, 97) };
		private static readonly SKColor LongColor = new(59, 207, 134);
		private static readonly SKColor LongVolumeColor = new(59, 207, 134, 64);
		private static readonly SKColor ShortColor = new(237, 49, 97);
		private static readonly SKColor ShortVolumeColor = new(237, 49, 97, 64);
		private readonly SKPaint LongPaint = new() { Color = LongColor };
		private readonly SKPaint LongVolumePaint = new() { Color = LongVolumeColor };
		private readonly SKPaint ShortPaint = new() { Color = ShortColor };
		private readonly SKPaint ShortVolumePaint = new() { Color = ShortVolumeColor };
		private readonly SKPaint CandlePointerPaint = new() { Color = new SKColor(255, 255, 255, 16) };
		private readonly SKPaint CandleBuyPointerPaint = new() { Color = new SKColor(59, 207, 134, 64) };
		private readonly SKPaint CandleSellPointerPaint = new() { Color = new SKColor(237, 49, 97, 64) };
		private readonly int CandleTopBottomMargin = 10;
		List<RicherQuote> Charts = [];
		private int ChartCount => Charts.Count;
		public float CurrentMouseX;
		public float CurrentMouseY;

		float LiveActualWidth;
		float LiveActualHeight;
		float LiveActualItemFullWidth => LiveActualWidth / ChartCount;
		float LiveActualItemMargin => LiveActualItemFullWidth * 0.2f;

		private void ChartIntervalComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
		{
			if (e.AddedItems[0] is not RicherInterval interval)
			{
				return;
			}

			currentInterval = interval;
			LoadChart();
		}

		void LoadChart()
		{
			Charts = currentPair.Chart.GetCharts(currentInterval);
			CandleChart.InvalidateVisual();
		}

		private void CandleChart_PaintSurface(object sender, SkiaSharp.Views.Desktop.SKPaintSurfaceEventArgs e)
		{
			if (ChartCount <= 0)
			{
				return;
			}

			LiveActualWidth = (float)CandleChart.ActualWidth;
			LiveActualHeight = (float)CandleChart.ActualHeight - CandleTopBottomMargin * 2;

			var canvas = e.Surface.Canvas;
			canvas.Clear(SKColors.Transparent);

			var yMax = (double)Charts.Max(x => x.High);
			var yMin = (double)Charts.Min(x => x.Low);
			var vMax = (double)Charts.Max(x => x.Volume);
			var vMin = (double)Charts.Min(x => x.Volume);

			// Draw Quote and Indicator
			for (int i = 0; i < Charts.Count; i++)
			{
				var quote = Charts[i];

				#region Volume
				canvas.DrawRect(
					new SKRect(
						LiveActualItemFullWidth * i + LiveActualItemMargin / 2,
						LiveActualHeight * 0.66f + (float)(LiveActualHeight * 0.33f * (vMax - (double)quote.Volume) / vMax) + CandleTopBottomMargin,
						LiveActualItemFullWidth * (i + 1) - LiveActualItemMargin / 2,
						LiveActualHeight + CandleTopBottomMargin
						),
					quote.Open < quote.Close ? LongVolumePaint : ShortVolumePaint
					);
				#endregion

				#region Candle
				canvas.DrawLine(
					new SKPoint(
						LiveActualItemFullWidth * (i + 0.5f),
						LiveActualHeight * (float)(1.0 - ((double)quote.High - yMin) / (yMax - yMin)) + CandleTopBottomMargin),
					new SKPoint(
						LiveActualItemFullWidth * (i + 0.5f),
						LiveActualHeight * (float)(1.0 - ((double)quote.Low - yMin) / (yMax - yMin)) + CandleTopBottomMargin),
					quote.Open < quote.Close ? LongPaint : ShortPaint);
				canvas.DrawRect(
					new SKRect(
						LiveActualItemFullWidth * i + LiveActualItemMargin / 2,
						LiveActualHeight * (float)(1.0 - ((double)quote.Open - yMin) / (yMax - yMin)) + CandleTopBottomMargin,
						LiveActualItemFullWidth * (i + 1) - LiveActualItemMargin / 2,
						LiveActualHeight * (float)(1.0 - ((double)quote.Close - yMin) / (yMax - yMin)) + CandleTopBottomMargin
						),
					quote.Open < quote.Close ? LongPaint : ShortPaint
					);
				#endregion
			}

			// Draw Pointer
			canvas.DrawRect(
				(int)(CurrentMouseX / LiveActualItemFullWidth) * LiveActualItemFullWidth,
				0,
				LiveActualItemFullWidth,
				(float)CandleChart.ActualHeight,
				CandlePointerPaint
				);

			// Draw Horizontal Line Pointer
			canvas.DrawLine(
				0, CurrentMouseY, (float)CandleChart.ActualWidth, CurrentMouseY, HorizontalLinePointerPaint
				);

			// Draw Horizontal Line Price
			var pointingPrice = (decimal)
				Math.Round(
					(
						(CandleTopBottomMargin - CurrentMouseY) / LiveActualHeight + 1
					) * (yMax - yMin) + yMin
				, 4);
			canvas.DrawText($"{pointingPrice}", 2, CurrentMouseY - 4, CandleInfoFont, CandleInfoPaint);

			// Draw Info Text
			try
			{
				CandleInfoFont.Size = Math.Max(10, (float)ActualHeight / 75);
				var pointingChart = CurrentMouseX == -1358 ? Charts[ChartCount - 1] : Charts[(int)(CurrentMouseX / LiveActualItemFullWidth)];
				var changeText = pointingChart.Close >= pointingChart.Open ? $"+{(pointingChart.Close - pointingChart.Open) / pointingChart.Open:P2}" : $"{(pointingChart.Close - pointingChart.Open) / pointingChart.Open:P2}";
				canvas.DrawText($"{pointingChart.Time:yyyy-MM-dd HH:mm:ss}, O {pointingChart.Open} H {pointingChart.High} L {pointingChart.Low} C {pointingChart.Close} ({changeText}) V {pointingChart.Volume}", 2, CandleInfoFont.Size + 2, CandleInfoFont, CandleInfoPaint);
			}
			catch
			{
			}
		}

		private void Window_MouseMove(object sender, MouseEventArgs e)
		{
			try
			{
				var cursorPosition = GetCursorPosition();
				var x = (float)cursorPosition.X - (float)CandleChart.PointToScreen(new Point(0, 0)).X;
				var y = (float)cursorPosition.Y - (float)CandleChart.PointToScreen(new Point(0, 0)).Y;
				CurrentMouseY = y;

				if (x < 0 || x >= CandleChart.ActualWidth - CandleChart.ActualWidth / ChartCount)
				{
					if (CurrentMouseX != -1358)
					{
						CurrentMouseX = -1358;
						CandleChart.InvalidateVisual();
					}
					return;
				}

				CurrentMouseX = x;
				CandleChart.InvalidateVisual();
			}
			catch
			{
			}
		}
		#endregion
	}
}